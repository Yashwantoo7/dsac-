class Solution {
public:
    void DFS(int u,vector<int>g[],vector<int>&disc,vector<int>&low,vector<int>&parent,vector<vector<int>>&bridges,int n){
        static int t=0;
        disc[u]=low[u]=t;
        t++;
        for(int v:g[u]){
            if(disc[v]==-1){
                parent[v]=u;
                DFS(v,g,disc,low,parent,bridges,n);
                low[u]=min(low[u],low[v]);
                if(low[v]>disc[u]){
                    bridges.push_back({u,v});
                }
            }
            else if(parent[u]!=v){
                low[u]=min(low[u],disc[v]);
            }
        }
    }

    vector<vector<int>> bridge(vector<int> g[],int n){
        vector<int>disc(n,-1);
        vector<int>low(n,-1);
        vector<int>parent(n,-1);
        vector<vector<int>>bridges;
        for(int i=0;i<n;i++){
            if(disc[i]==-1){
                DFS(i,g,disc,low,parent,bridges,n);
            }
        }
        return bridges;
    }
    
vector<vector<int>> criticalConnections(int n, vector<vector<int>>& conn) {
    vector<int> g[n];
    for(int i=0;i<conn.size();i++){
        g[conn[i][0]].push_back(conn[i][1]);
        g[conn[i][1]].push_back(conn[i][0]);            
    }
    return bridge(g,n);
}

};